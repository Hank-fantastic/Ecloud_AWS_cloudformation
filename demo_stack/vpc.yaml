AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Network Template: Sample template that creates a VPC with standard design.

######################
# Parameters section
######################

Parameters:
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  VPCCidrBlock:
    Description: The IP address range for the VPC
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.0.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  AvailabilityZone1:
    Description: The Availability Zone for your Public Subnet 1 and Private Subnet 1
    Type: AWS::EC2::AvailabilityZone::Name
  
  AvailabilityZone2:
    Description: The Availability Zone for your Public Subnet 2 and Private Subnet 2
    Type: AWS::EC2::AvailabilityZone::Name

  PublicSubnet1CidrBlock:
    Description: The IP address range for the Public Subnet 1
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.0.0.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  PublicSubnet2CidrBlock:
    Description: The IP address range for the Public Subnet 2
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.0.128.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  # PrivateSubnet1CidrBlock:
  #   Description: The IP address range for the Private Subnet 1
  #   Type: String
  #   MinLength: 9
  #   MaxLength: 18
  #   Default: 10.0.1.0/24
  #   AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
  #   ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  # PrivateSubnet2CidrBlock:
  #   Description: The IP address range for the Private Subnet 2
  #   Type: String
  #   MinLength: 9
  #   MaxLength: 18
  #   Default: 10.0.129.0/24
  #   AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
  #   ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

######################
# Resources section
######################

Resources:
  ProjectVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "project"
          Value: "myProject"
  
  IGW:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref ProjectVPC

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProjectVPC      
      Tags:
        - Key: "Name"
          Value: "Public route table"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref IGW
      DestinationCidrBlock: 0.0.0.0/0

  # Private Route Table
  # PrivateRouteTable1:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref ProjectVPC     
  #     Tags:
  #       - Key: "Name"
  #         Value: "Private route table"

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref PublicSubnet1CidrBlock
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "Public Subnet 1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref PublicSubnet2CidrBlock
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "Public Subnet 2"

  # # Private Subnets
  # PrivateSubnet1:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref ProjectVPC
  #     AvailabilityZone: !Ref AvailabilityZone1
  #     CidrBlock: !Ref PrivateSubnet1CidrBlock
  #     Tags:
  #       - Key: "Name"
  #         Value: "Private Subnet 1"

  # PrivateSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref ProjectVPC
  #     AvailabilityZone: !Ref AvailabilityZone2
  #     CidrBlock: !Ref PrivateSubnet2CidrBlock
  #     Tags:
  #       - Key: "Name"
  #         Value: "Private Subnet 2"

  # Route table association to subnets
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # PrivateSubnet1RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet1
  #     RouteTableId: !Ref PrivateRouteTable1

  # PrivateSubnet2RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet2
  #     RouteTableId: !Ref PrivateRouteTable1
  
  # NACL
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref ProjectVPC
      Tags:
      - Key: "Name"
        Value: "Public"
  # NetworkAclPrivate:
  #   Type: 'AWS::EC2::NetworkAcl'
  #   Properties:
  #     VpcId: !Ref ProjectVPC
  #     Tags:
  #     - Key: "Name"
  #       Value: "Private"

   ## NACL Association to subnets
  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociationBPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref NetworkAclPublic
  
  # SubnetNetworkAclAssociationAPrivate:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet1
  #     NetworkAclId: !Ref NetworkAclPrivate

  # SubnetNetworkAclAssociationBPrivate:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet2
  #     NetworkAclId: !Ref NetworkAclPrivate

  # NACL Rules
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  # NetworkAclEntryInPrivateAllowVPC:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref NetworkAclPrivate
  #     RuleNumber: 100
  #     Protocol: -1
  #     RuleAction: allow
  #     Egress: false
  #     CidrBlock: '0.0.0.0/0'

  # NetworkAclEntryOutPrivateAllowVPC:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref NetworkAclPrivate
  #     RuleNumber: 100
  #     Protocol: -1
  #     RuleAction: allow
  #     Egress: true
  #     CidrBlock: '0.0.0.0/0'

  # Security Group for EC2
  WebSecurityGroup:  
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Web SG"
      GroupDescription: "Security group with allow ELB"
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
  
  # Security Group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ALB SG"
      GroupDescription: "Security group with allow HTTP(s)"
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # # Security Group for DB
  # DBSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: "MySQL SG"
  #     GroupDescription: "Security group with allow EC2"
  #     VpcId: !Ref ProjectVPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 3306
  #         ToPort: 3306
  #         SourceSecurityGroupId: !Ref WebSecurityGroup

######################
# Outputs section
######################

Outputs:
  VPC:
    Value: !Ref ProjectVPC

  AvailabilityZone1:
    Value: !Ref AvailabilityZone1

  AvailabilityZone2:
    Value: !Ref AvailabilityZone2

  PublicSubnet1:
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Value: !Ref PublicSubnet2

  # PrivateSubnet1:
  #   Value: !Ref PrivateSubnet1

  # PrivateSubnet2:
  #   Value: !Ref PrivateSubnet2

  WebSG:
    Value: !Ref WebSecurityGroup

  ALBSG:
    Value: !Ref ALBSecurityGroup

  # DBSG:
  #   Value: !Ref DBSecurityGroup
  